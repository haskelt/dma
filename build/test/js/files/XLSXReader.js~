{{ JS_COPYRIGHT_NOTICE }}

import logger from '{{ SITE_PATH }}/js/logger.js';

class XLSXReader {

    /**************************************************************************/

    read (file_object, callback) {

        if (typeof (FileReader) != "undefined") {
	    this.callback = callback;
            var reader = new FileReader();
            //For Browsers other than IE.
            if (reader.readAsBinaryString) {
                reader.onload = this.finishRead.bind(this);                     
                reader.readAsBinaryString(file_object);
            } else {
		alert("This app doesn't work on Internet Explorer");
            }
        } else {
            alert("This app doesn't work on browsers that don't support HTML5.");
        }
	
    } // read
    
    /**************************************************************************/

    finishRead (e) {

	/* We have the try/catch block here out of principle, but the read
	   method doesn't seem to throw an exception no matter what kind
	   of file you throw at it - even PDF or PNG. So it's important
	   to validate after the read to make sure you're getting something
	   reasonable. */
	try {
            var workbook = XLSX.read(e.target.result, { type: 'binary' });
	    logger.postMessage('TRACE', 'files', 'Successfully parsed Excel file');
	    /* we return a JSON object with an entry for each sheet, which
	       consists of an array of objects (1 object for each row) */
	    var results = {};
	    for(let sheet in workbook.Sheets){
		results[sheet] = XLSX.utils.sheet_to_json(workbook.Sheets[sheet]);
	    }
	    this.callback(results);
	}
	catch (err) {
	    logger.postMessage('ERROR', 'files', err.message);
	    this.callback(null);
	}
	
	
    } // finishRead
    
    /**************************************************************************/

    dummy () {
	    
	//Create a HTML Table element.
        var myTable  = document.createElement("table");
        myTable.border = "1";
	
        //Add the header row.
        var row = myTable.insertRow(-1);
	
        //Add the header cells.
        var headerCell = document.createElement("TH");
        headerCell.innerHTML = "Id";
        row.appendChild(headerCell);
	
        headerCell = document.createElement("TH");
        headerCell.innerHTML = "Name";
        row.appendChild(headerCell);
	
        headerCell = document.createElement("TH");
        headerCell.innerHTML = "Country";
        row.appendChild(headerCell);
        
        headerCell = document.createElement("TH");
        headerCell.innerHTML = "Age";
        row.appendChild(headerCell);
        
        headerCell = document.createElement("TH");
        headerCell.innerHTML = "Date";
        row.appendChild(headerCell);
        
        headerCell = document.createElement("TH");
        headerCell.innerHTML = "Gender";
        row.appendChild(headerCell);
	    
        //Add the data rows from Excel file.
        for (var i = 0; i < excelRows.length; i++) {
	    //Add the data row.
	    var row = myTable.insertRow(-1);
	    
	    //Add the data cells.
	    var cell = row.insertCell(-1);
	    cell.innerHTML = excelRows[i].Id;
	    
	    cell = row.insertCell(-1);
	    cell.innerHTML = excelRows[i].Name;
	    
	    cell = row.insertCell(-1);
	    cell.innerHTML = excelRows[i].Country;
	    
	    cell = row.insertCell(-1);
	    cell.innerHTML = excelRows[i].Age;
	    
	    cell = row.insertCell(-1);
	    cell.innerHTML = excelRows[i].Date;
	    
	    cell = row.insertCell(-1);
	    cell.innerHTML = excelRows[i].Gender;
        }
        
	/*        var ExcelTable = document.getElementById("ExcelTable");
		  ExcelTable.innerHTML = "";
		  ExcelTable.appendChild(myTable);*/
    } // dummy

    /**************************************************************************/
    
} // XLSXReader

export default XLSXReader;


